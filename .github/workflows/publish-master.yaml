name: Build and Push Docker Image

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from version file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if the version is already published
        id: version_check
        run: |
          if docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/cordova-android-builder-api-34:${{ env.VERSION }} > /dev/null 2>&1; then
            echo "Image with version ${{ env.VERSION }} already exists. Skipping build."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "New version detected. Proceeding with build."
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        if: env.skip == 'false'
        run: |
          docker build --build-arg VERSION=${{ env.VERSION }} -t ${{ secrets.DOCKER_USERNAME }}/cordova-android-builder-api-34:${{ env.VERSION }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/cordova-android-builder-api-34:${{ env.VERSION }}

      - name: Authenticate with Docker Hub
        id: dockerhub_auth
        run: |
          # Authenticate with Docker Hub and get the Bearer token
          response=$(curl -s -X POST https://hub.docker.com/v2/users/login/ \
            -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}')

          # Extract the token from the response
          token=$(echo $response | jq -r .token)

          # Output the token for later use
          echo "::set-output name=token::$token"

      - name: Sync README to Docker Hub
        run: |
          # Read the content of README.md and escape it for JSON
          README_CONTENT=$(jq -Rs '.' README.md)
          echo "${{ steps.dockerhub_auth.outputs.token }}"

          # Update Docker Hub repository description using the Docker Hub API
          curl -X PATCH https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/cordova-android-builder-api-34/ \
            -H "Authorization: Bearer ${{ steps.dockerhub_auth.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d "{\"full_description\": ${README_CONTENT}}"
